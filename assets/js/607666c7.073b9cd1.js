"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8421],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return f}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),f=i,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||r;return a?n.createElement(d,o(o({ref:t},p),{},{components:a})):n.createElement(d,o({ref:t},p))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4475:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=a(3117),i=a(102),r=(a(7294),a(3905)),o=["components"],s={title:"Use Scala CLI in GitHub Actions",sidebar_position:9},l=void 0,c={unversionedId:"cookbooks/gh-action",id:"cookbooks/gh-action",title:"Use Scala CLI in GitHub Actions",description:"Preparing simple aplication",source:"@site/docs/cookbooks/gh-action.md",sourceDirName:"cookbooks",slug:"/cookbooks/gh-action",permalink:"/scala-cli/docs/cookbooks/gh-action",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/cookbooks/gh-action.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Use Scala CLI in GitHub Actions",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Scala Scripts with instant startup",permalink:"/scala-cli/docs/cookbooks/instant-startup-scala-scripts"},next:{title:"Command-line options",permalink:"/scala-cli/docs/reference/cli-options"}},p={},u=[{value:"Preparing simple aplication",id:"preparing-simple-aplication",level:2},{value:"Run tests in Github CI",id:"run-tests-in-github-ci",level:2},{value:"Check your Scala code format",id:"check-your-scala-code-format",level:2},{value:"Package your application",id:"package-your-application",level:2},{value:"Distribute generated native application",id:"distribute-generated-native-application",level:2}],m={toc:u};function f(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"preparing-simple-aplication"},"Preparing simple aplication"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"scala-cli")," lets you run, test, and package Scala code in various environments, including GitHub CI.\nTo use Scala CLI features in a simple way you can use the GitHub Actions ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/VirtusLab/scala-cli-setup"},"scala-cli-setup")," that installs everything necessary to run your Scala CLI application and more."),(0,r.kt)("p",null,"For example, here's a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," application printing the files in a given directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=Ls.scala",title:"Ls.scala"},'//> using scala "2.13"\n//> using lib "com.lihaoyi::os-lib:0.7.8"\n\n@main def hello(args: String*) =\n  val path = args.headOption match\n    case Some(p) => os.Path(p, os.pwd)\n    case _       => os.pwd\n\n  if (os.isDir(path)) println(os.list(path).mkString(","))\n  else System.err.println("Expected directory path as an input")\n')),(0,r.kt)("p",null,"and some tests for ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=TestsLs.test.scala",title:"TestsLs.test.scala"},'//> using lib "org.scalameta::munit::0.7.27"\nimport scala.util.Properties\n\nclass TestsLs extends munit.FunSuite {\n  test("ls") {\n    // prepare test directory\n    val tempDir = os.temp.dir()\n    // create files\n    val expectedFiles = Seq("Ls", "Hello").map(tempDir / _)\n    expectedFiles.foreach(os.write(_, "Hello"))\n\n    // check\n    val scalaCLILauncher = if(Properties.isWin) "scala-cli.bat" else "scala-cli"\n    val foundFiles =\n      os.proc(scalaCLILauncher, "Ls.scala", "--", tempDir).call().out.trim()\n\n    expectedFiles.map(_.toString).foreach { file =>\n      assert(foundFiles.contains(file))\n    }\n  }\n}\n\n')),(0,r.kt)("h2",{id:"run-tests-in-github-ci"},"Run tests in Github CI"),(0,r.kt)("p",null,"The following configuration of ",(0,r.kt)("inlineCode",{parentName:"p"},"ci.yml")," contains a definition of job that runs tests using ",(0,r.kt)("inlineCode",{parentName:"p"},"scala-cli")," for every platform defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"matrix.OS"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'jobs:\n  build:\n    runs-on: ${{ matrix.OS }}\n    strategy:\n      matrix:\n        OS: ["ubuntu-latest", "macos-latest", "windows-latest"]\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - uses: coursier/cache-action@v6.3\n    - uses: VirtusLab/scala-cli-setup@v0.1\n    - run: scala-cli test .\n')),(0,r.kt)("h2",{id:"check-your-scala-code-format"},"Check your Scala code format"),(0,r.kt)("p",null,"To check the code style of your sources, you can use ",(0,r.kt)("a",{parentName:"p",href:"https://scalameta.org/scalafmt/"},"Scalafmt"),". "),(0,r.kt)("p",null,"Before running Scalafmt, you need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},".scalafmt.conf")," configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"version = 3.5.2\nrunner.dialect = scala3\n")),(0,r.kt)("p",null,"and then check your code format in GitHub CI by adding new job ",(0,r.kt)("inlineCode",{parentName:"p"},"format"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'  format:\n    runs-on: "ubuntu-latest"\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - uses: coursier/cache-action@v6.3\n    - uses: VirtusLab/scala-cli-setup@v0.1\n    - name: Scalafmt check\n      run: |\n        scala-cli fmt --check . || (\n          echo "To format code run"\n          echo "  scala-cli fmt ."\n          exit 1\n        )\n')),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"scala-cli fmt --check .")," command fails, it can be easily fixed by running ",(0,r.kt)("inlineCode",{parentName:"p"},"scala-cli fmt ."),", which correctly formats your code."),(0,r.kt)("h2",{id:"package-your-application"},"Package your application"),(0,r.kt)("p",null,"Scala CLI allows to build native executable applications using ",(0,r.kt)("a",{parentName:"p",href:"https://www.graalvm.org"},"GraalVM"),", which can be uploaded as GitHub release artifacts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    - name: Package app\n      run: scala-cli .github/scripts/package.sc\n")),(0,r.kt)("p",null,"Given this simple Scala Script ",(0,r.kt)("inlineCode",{parentName:"p"},"package.sc")," to package application to every platform:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=package.sc",title:"package.sc"},'//> using scala "3.1.2"\n//> using lib "com.lihaoyi::os-lib:0.8.0"\nimport scala.util.Properties\n\nval platformSuffix: String = {\n  val os =\n    if (Properties.isWin) "pc-win32"\n    else if (Properties.isLinux) "pc-linux"\n    else if (Properties.isMac) "apple-darwin"\n    else sys.error(s"Unrecognized OS: ${sys.props("os.name")}")\n  os\n}\nval artifactsPath = os.Path("artifacts", os.pwd)\nval destPath =\n  if (Properties.isWin) artifactsPath / s"ls-$platformSuffix.exe"\n  else artifactsPath / s"ls-$platformSuffix"\nval scalaCLILauncher =\n  if (Properties.isWin) "scala-cli.bat" else "scala-cli"\n\nos.makeDir(artifactsPath)\nos.proc(scalaCLILauncher, "package", ".", "-o", destPath, "--native-image")\n  .call(cwd = os.pwd)\n  .out\n  .text()\n  .trim\n')),(0,r.kt)("h2",{id:"distribute-generated-native-application"},"Distribute generated native application"),(0,r.kt)("p",null,"To upload generated native executable applications to artifacts you can use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/actions/upload-artifact"},"upload-artifact")," GitHub Actions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    - uses: actions/upload-artifact@v3\n      with:\n        name: launchers\n        path: artifacts\n        if-no-files-found: error\n        retention-days: 2\n")),(0,r.kt)("p",null,"When release CI pass, you should be able to download artifacts that contain native launchers of your applications."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/lwronski/ls-scala-cli-demo/actions/runs/2376334882"},"Here")," you can find examples of a CI that contains generated launcher based on this cookbook."),(0,r.kt)("p",null,"You can find the code of this cookbook ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lwronski/ls-scala-cli-demo"},"here"),"."))}f.isMDXComponent=!0}}]);