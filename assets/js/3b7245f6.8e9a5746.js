"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2516],{9705:function(e,a,n){n.d(a,{m:function(){return s},v:function(){return l}});var t=n(7294),i=n(2004);function l(e){var a=e.children;return t.createElement("div",{className:"runnable-command"},a)}function s(e){var a=e.url;return t.createElement(i.Z,{playing:!0,loop:!0,muted:!0,controls:!0,width:"100%",height:"",url:a})}},9076:function(e,a,n){n.r(a),n.d(a,{assets:function(){return d},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return u}});var t=n(3117),i=n(102),l=(n(7294),n(3905)),s=n(9705),p=["components"],r={title:"Piping",sidebar_position:23},o="Piping",c={unversionedId:"guides/piping",id:"guides/piping",title:"Piping",description:"Instead of passing paths to your sources, you can also pipe your code via standard input:",source:"@site/docs/guides/piping.md",sourceDirName:"guides",slug:"/guides/piping",permalink:"/scala-cli/docs/guides/piping",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/guides/piping.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{title:"Piping",sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"Scala Native",permalink:"/scala-cli/docs/guides/scala-native"},next:{title:"Snippets",permalink:"/scala-cli/docs/guides/snippets"}},d={},u=[{value:"Wildcards",id:"wildcards",level:2},{value:"Examples",id:"examples",level:2},{value:"Mixing piped sources with on-disk ones",id:"mixing-piped-sources-with-on-disk-ones",level:2}],m={toc:u};function g(e){var a=e.components,n=(0,i.Z)(e,p);return(0,l.kt)("wrapper",(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"piping"},"Piping"),(0,l.kt)("p",null,"Instead of passing paths to your sources, you can also pipe your code via standard input:"),(0,l.kt)(s.v,{mdxType:"ChainedSnippets"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo '@main def hello() = println(\"Hello\")' | scala-cli _\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,l.kt)("h2",{id:"wildcards"},"Wildcards"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"_")," wildcard implies that the piped code is a standard Scala app.\nIt is also possible to pass a script or Java code, when using the appropriate wildcard.\nThe available options are as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for standard Scala code use ",(0,l.kt)("inlineCode",{parentName:"li"},"_"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"_.scala")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"-.scala"),";"),(0,l.kt)("li",{parentName:"ul"},"for Scala scripts use ",(0,l.kt)("inlineCode",{parentName:"li"},"-"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"_.sc")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"-.sc"),";"),(0,l.kt)("li",{parentName:"ul"},"for Java code use ",(0,l.kt)("inlineCode",{parentName:"li"},"_.java")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"-.java"),".")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"scripts")),(0,l.kt)(s.v,{mdxType:"ChainedSnippets"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'println(\"Hello\")' | scala-cli _.sc\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Scala code")),(0,l.kt)(s.v,{mdxType:"ChainedSnippets"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo '@main def hello() = println(\"Hello\")' | scala-cli _.scala\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Java code")),(0,l.kt)(s.v,{mdxType:"ChainedSnippets"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'class Hello { public static void main(String args[]) { System.out.println(\"Hello\"); } }' | scala-cli _.java\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,l.kt)("h2",{id:"mixing-piped-sources-with-on-disk-ones"},"Mixing piped sources with on-disk ones"),(0,l.kt)("p",null,"It is also possible to pipe some code via standard input, while the rest of your code is on-disk."),(0,l.kt)(s.v,{mdxType:"ChainedSnippets"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'case class HelloMessage(msg: String)' > HelloMessage.scala\necho '@main def hello() = println(HelloMessage(msg = \"Hello\").msg)' | scala-cli _ HelloMessage.scala\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,l.kt)("p",null,"You can even refer to code from piped scripts, when needed. A piped script can be referred to by its wrapper\nname ",(0,l.kt)("inlineCode",{parentName:"p"},"stdin"),", as in the example below."),(0,l.kt)(s.v,{mdxType:"ChainedSnippets"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo '@main def main() = println(stdin.message)' > PrintMessage.scala\necho 'def message: String = \"Hello\"' | scala-cli PrintMessage.scala _.sc\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))))}g.isMDXComponent=!0}}]);