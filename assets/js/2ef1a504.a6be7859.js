"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3289],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6984:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],s={title:"Password options",sidebar_position:8},l=void 0,c={unversionedId:"reference/password-options",id:"reference/password-options",title:"Password options",description:"Some Scala CLI options expect password / secret values. Passing passwords directly on the command-line",source:"@site/docs/reference/password-options.md",sourceDirName:"reference",slug:"/reference/password-options",permalink:"/scala-cli/docs/reference/password-options",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/reference/password-options.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Password options",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Supported scala versions",permalink:"/scala-cli/docs/reference/scala-versions"},next:{title:"Proxy authentication",permalink:"/scala-cli/docs/reference/proxy-authentication"}},p={},u=[{value:"Environment variable",id:"environment-variable",level:2},{value:"Command printing the secret",id:"command-printing-the-secret",level:2},{value:"File",id:"file",level:2},{value:"Inline",id:"inline",level:2}],d={toc:u};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Some Scala CLI options expect password / secret values. Passing passwords directly on the command-line\nposes security issues, so Scala CLI offers a few ways to work around that.\nPasswords / secrets can be passed: via environment variables, via a command printing the secret, via a file, or (not recommended)\ninline."),(0,o.kt)("h2",{id:"environment-variable"},"Environment variable"),(0,o.kt)("p",null,"Prefix the environment variable name with ",(0,o.kt)("inlineCode",{parentName:"p"},"env:"),", like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ export MY_PASSWORD=1234\n$ scala-cli publish . --repo-password env:MY_PASSWORD\n")),(0,o.kt)("h2",{id:"command-printing-the-secret"},"Command printing the secret"),(0,o.kt)("p",null,"Prefix the command printing the secret with ",(0,o.kt)("inlineCode",{parentName:"p"},"command:"),", like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'$ get-secret sonatype-s01 # command printing the secret\n1234\n$ scala-cli publish . --repo-password "command:get-secret sonatype-s01"\n')),(0,o.kt)("p",null,"Alternatively, if some of the command arguments contain spaces, one can pass a JSON list:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'$ get-secret "sonatype s01" # command printing the secret\n1234\n$ scala-cli publish . --repo-password \'command:["get-secret", "sonatype s01"]\'\n')),(0,o.kt)("h2",{id:"file"},"File"),(0,o.kt)("p",null,"Prefix the file path with ",(0,o.kt)("inlineCode",{parentName:"p"},"file:"),", like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'$ cat "$HOME/.passwords/sonatype-s01"\n1234\n$ scala-cli publish . --repo-password "file:$HOME/.passwords/sonatype-s01"\n')),(0,o.kt)("h2",{id:"inline"},"Inline"),(0,o.kt)("p",null,"This is the less secure way of passing secrets to Scala CLI, and should only be used\nfor debugging purposes, with non-sensitive secrets. Prefix the password / secret value\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"value:"),", like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ scala-cli publish . --repo-password value:1234\n")))}m.isMDXComponent=!0}}]);