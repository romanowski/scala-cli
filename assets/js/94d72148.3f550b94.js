"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7024],{9705:function(e,t,n){n.d(t,{m:function(){return i},v:function(){return s}});var a=n(7294),p=n(2004);function s(e){var t=e.children;return a.createElement("div",{className:"runnable-command"},t)}function i(e){var t=e.url;return a.createElement(p.Z,{playing:!0,loop:!0,muted:!0,controls:!0,width:"100%",height:"",url:t})}},7425:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return u}});var a=n(3117),p=n(102),s=(n(7294),n(3905)),i=n(9705),l=["components"],r={title:"Snippets",sidebar_position:23},o="Snippets",c={unversionedId:"guides/snippets",id:"guides/snippets",title:"Snippets",description:"Instead of passing paths to your sources, you can also pass the code itself with the appropriate option.",source:"@site/docs/guides/snippets.md",sourceDirName:"guides",slug:"/guides/snippets",permalink:"/scala-cli/docs/guides/snippets",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/guides/snippets.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{title:"Snippets",sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"Piping",permalink:"/scala-cli/docs/guides/piping"},next:{title:"Internals",permalink:"/scala-cli/docs/guides/internals"}},d={},u=[{value:"Examples",id:"examples",level:2},{value:"Snippets and other kinds of inputs",id:"snippets-and-other-kinds-of-inputs",level:2},{value:"Referring to code from a snippet",id:"referring-to-code-from-a-snippet",level:2}],m={toc:u};function g(e){var t=e.components,n=(0,p.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"snippets"},"Snippets"),(0,s.kt)("p",null,"Instead of passing paths to your sources, you can also pass the code itself with the appropriate option."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli run --scala-snippet '@main def hello() = println(\"Hello\")'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,s.kt)("p",null,"You can also divide your code into multiple snippets when passing it this way. Each snippet is then treated as a\nseparate input by Scala CLI."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli run --scala-snippet '@main def main() = println(Messages.hello)' --scala-snippet 'object Messages { def hello = \"Hello\" }'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"scripts")),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli run -e 'println(\"Hello\")'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Scala code")),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli run --scala-snippet '@main def hello() = println(\"Hello\")'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Java code")),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli run --java-snippet 'class Hello { public static void main(String args[]) { System.out.println(\"Hello\"); } }'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"a mix of Scala, Java and scripts")),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli run --scala-snippet '@main def hello() = println(s\"${JavaSnippet.hello} ${snippet.world}\")' --java-snippet 'public class JavaSnippet { public static String hello = \"Hello\"; }' --script-snippet 'def world = \"world\"'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello world\n"))),(0,s.kt)("h2",{id:"snippets-and-other-kinds-of-inputs"},"Snippets and other kinds of inputs"),(0,s.kt)("p",null,"It is also possible to mix snippets with on-disk sources."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"cat Main.scala\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"object Main extends App {\n  val snippetData = SnippetData()\n  println(snippetData.value)\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli Main.scala --scala-snippet 'case class SnippetData(value: String = \"Hello\")'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,s.kt)("p",null,"Or even with piped ones, why not."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'println(SnippetData().value)' ||  scala-cli _.sc --scala-snippet 'case class SnippetData(value: String = \"Hello\")'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,s.kt)("p",null,"Nothing stops you from mixing everything all at once, really."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"cat Main.scala\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'object Main extends App {\n  val scalaSnippetString = ScalaSnippet().value\n  val javaSnippetString = JavaSnippet.data\n  val scriptSnippetString = snippet.script\n  val pipedInputString = stdin.piped\n  val ondiskScriptString = ondisk.script\n  println(s"Output: $scalaSnippetString $javaSnippetString $scriptSnippetString $pipedInputString")\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"cat ondisk.sc\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'def script = "on-disk-script"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"echo 'def piped = \"piped-script\"'|scala-cli . _.sc --scala-snippet 'case class ScalaSnippet(value: String = \"scala-snippet\")' --java-snippet 'public class JavaSnippet { public static String data = \"java-snippet\"; }' --script-snippet 'def script = \"script-snippet\"'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Output: scala-snippet java-snippet script-snippet piped-script\n"))),(0,s.kt)("h2",{id:"referring-to-code-from-a-snippet"},"Referring to code from a snippet"),(0,s.kt)("p",null,"When referring to code coming from a script snippet passed with ",(0,s.kt)("inlineCode",{parentName:"p"},"--script-snippet")," (or ",(0,s.kt)("inlineCode",{parentName:"p"},"-e"),"), you use its wrapper\nname: ",(0,s.kt)("inlineCode",{parentName:"p"},"snippet")),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli run --scala-snippet '@main def main() = println(snippet.hello)' --script-snippet 'def hello: String = \"Hello\"'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))),(0,s.kt)("p",null,"When referring to code coming from multiple script snippets, you use their wrapper names according to the order they\nwere passed (starting from 0 for the first script snippet): ",(0,s.kt)("inlineCode",{parentName:"p"},"snippet${snippetNumber}"),". The ",(0,s.kt)("inlineCode",{parentName:"p"},"snippetNumber")," is omitted\nfor the first script snippet (0). In other words, the first passed snippet is just ",(0,s.kt)("inlineCode",{parentName:"p"},"snippet"),", the second is ",(0,s.kt)("inlineCode",{parentName:"p"},"snippet1"),",\nthen ",(0,s.kt)("inlineCode",{parentName:"p"},"snippet2")," and so on, as in the example:"),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli run --scala-snippet '@main def main() = println(s\"${snippet.hello} ${snippet1.world}${snippet2.exclamation}\")' --script-snippet 'def hello: String = \"Hello\"' --script-snippet 'def world: String = \"world\"' --script-snippet 'def exclamation: String = \"!\"'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello world!\n"))),(0,s.kt)("p",null,"This is similar to how you refer to code from piped scripts through their wrapper name (",(0,s.kt)("inlineCode",{parentName:"p"},"stdin"),"), more on which can be\nfound in ",(0,s.kt)("a",{parentName:"p",href:"/scala-cli/docs/guides/scripts"},"the scripts guide"),"."),(0,s.kt)("p",null,"In fact, you can refer to both kinds of scripts at one time, just keep in mind that you need to pick which script is to\nactually be run with the ",(0,s.kt)("inlineCode",{parentName:"p"},"--main-class")," option when multiple scripts are present on the classpath (and no non-script\nmain class was passed)."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"cat ondisk.sc\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=ondisk.sc",title:"ondisk.sc"},'println(s"${stdin.hello} ${snippet.world}${snippet1.exclamation}")\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},'echo \'def hello = "Hello"\' | scala-cli _.sc ondisk.sc -e \'def world = "world"\' -e \'def exclamation = "!" --main-class ondisk_sc\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello world!\n"))),(0,s.kt)("p",null,"When in doubt on what main classes are available on the classpath, you can always refer to the output\nof ",(0,s.kt)("inlineCode",{parentName:"p"},"--list-main-classes")),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"echo 'def hello = \"Hello\"' | scala-cli _.sc ondisk.sc -e 'def world = \"world\"' --list-main-classes\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"ondisk_sc snippet_sc stdin_sc\n"))))}g.isMDXComponent=!0}}]);