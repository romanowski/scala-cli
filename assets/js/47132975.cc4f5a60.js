"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[285],{9705:function(e,a,n){n.d(a,{m:function(){return i},v:function(){return s}});var t=n(7294),l=n(2004);function s(e){var a=e.children;return t.createElement("div",{className:"runnable-command"},a)}function i(e){var a=e.url;return t.createElement(l.Z,{playing:!0,loop:!0,muted:!0,controls:!0,width:"100%",height:"",url:a})}},7690:function(e,a,n){n.r(a),n.d(a,{assets:function(){return d},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return m}});var t=n(3117),l=n(102),s=(n(7294),n(3905)),i=n(9705),r=["components"],p={title:"Markdown (experimental)",sidebar_position:21},o=void 0,c={unversionedId:"guides/markdown",id:"guides/markdown",title:"Markdown (experimental)",description:"Scala CLI can compile, run, test, and package markdown (.md) sources.",source:"@site/docs/guides/markdown.md",sourceDirName:"guides",slug:"/guides/markdown",permalink:"/scala-cli/docs/guides/markdown",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/guides/markdown.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{title:"Markdown (experimental)",sidebar_position:21},sidebar:"tutorialSidebar",previous:{title:"Scripts",permalink:"/scala-cli/docs/guides/scripts"},next:{title:"Scala.js",permalink:"/scala-cli/docs/guides/scala-js"}},d={},m=[{value:"Plain <code>scala</code> snippets",id:"plain-scala-snippets",level:2},{value:"<code>scala raw</code> snippets",id:"scala-raw-snippets",level:2},{value:"<code>scala test</code> snippets",id:"scala-test-snippets",level:2},{value:"<code>reset</code> scope for <code>scala</code> snippets",id:"reset-scope-for-scala-snippets",level:2},{value:"Referring to code from Markdown",id:"referring-to-code-from-markdown",level:2},{value:"Plain <code>scala</code> code blocks",id:"plain-scala-code-blocks",level:3},{value:"<code>scala raw</code> and <code>scala test</code> code blocks",id:"scala-raw-and-scala-test-code-blocks",level:3}],k={toc:m};function u(e){var a=e.components,n=(0,l.Z)(e,r);return(0,s.kt)("wrapper",(0,t.Z)({},k,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Scala CLI can compile, run, test, and package markdown (",(0,s.kt)("inlineCode",{parentName:"p"},".md"),") sources."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"This feature is a work in progress and should currently be treated as experimental.\nMarkdown sources are ignored by default unless passed explicitly as inputs.\nYou can enable including non-explicit ",(0,s.kt)("inlineCode",{parentName:"p"},".md")," inputs by passing the ",(0,s.kt)("inlineCode",{parentName:"p"},"--enable-markdown")," option.")),(0,s.kt)("h2",{id:"plain-scala-snippets"},"Plain ",(0,s.kt)("inlineCode",{parentName:"h2"},"scala")," snippets"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markdown",metastring:"title=Example.md",title:"Example.md"},'# Example\n\nThis is a simple example of an `.md` file with a Scala snippet.\n\n```scala\nval message = "Hello from Markdown"\nprintln(message)\n```\n')),(0,s.kt)("p",null,"Plain ",(0,s.kt)("inlineCode",{parentName:"p"},"scala")," snippets are treated similarly to ",(0,s.kt)("inlineCode",{parentName:"p"},".sc")," scripts in that any kind of statement is accepted at the\ntop-level."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli run Example.md\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello from Markdown\n"))),(0,s.kt)("p",null,"Similarly to ",(0,s.kt)("inlineCode",{parentName:"p"},".sc")," scripts, when multiple ",(0,s.kt)("inlineCode",{parentName:"p"},".md")," files with plain ",(0,s.kt)("inlineCode",{parentName:"p"},"scala")," snippets are being run, each of them will have\nits own main class, that can be run."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli Example1.md Example2.md\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[error]  Found several main classes: Example1_md, Example2_md\n"))),(0,s.kt)("p",null,"When multiple such sources are passed as inputs, the main class has to be passed explicitly with the ",(0,s.kt)("inlineCode",{parentName:"p"},"--main-class"),"\noption."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli Example1.md Example2.md --main-class Example1_md\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello from Markdown\n"))),(0,s.kt)("p",null,"You can always check what main classes are available in the context with the ",(0,s.kt)("inlineCode",{parentName:"p"},"--list-main-classes")," option."),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli Example1.md Example2.md --list-main-classes\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Example1_md Example2_md\n"))),(0,s.kt)("h2",{id:"scala-raw-snippets"},(0,s.kt)("inlineCode",{parentName:"h2"},"scala raw")," snippets"),(0,s.kt)("p",null,"You can mark a ",(0,s.kt)("inlineCode",{parentName:"p"},"scala")," code block with the ",(0,s.kt)("inlineCode",{parentName:"p"},"raw")," keyword, indicating that this snippet should not be wrapped as a script\nand should instead be treated as is. This is the equivalent of code in a ",(0,s.kt)("inlineCode",{parentName:"p"},".scala")," file. For a ",(0,s.kt)("inlineCode",{parentName:"p"},"raw")," snippet to be\nrunnable a main class has to be included."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markdown",metastring:"title=RawExample.md",title:"RawExample.md"},'# `raw` example\n\nThis is a simple example of an `.md` file with a raw Scala snippet.\n\n```scala raw\nobject Main extends App {\n  val message = "Hello from Markdown"\n  println(message) \n}\n```\n')),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli RawExample.md\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello from Markdown\n"))),(0,s.kt)("h2",{id:"scala-test-snippets"},(0,s.kt)("inlineCode",{parentName:"h2"},"scala test")," snippets"),(0,s.kt)("p",null,"It is possible to run tests from ",(0,s.kt)("inlineCode",{parentName:"p"},"scala")," code blocks marked as ",(0,s.kt)("inlineCode",{parentName:"p"},"test"),". This is similar to ",(0,s.kt)("inlineCode",{parentName:"p"},"raw")," snippets in that the\ncode is not wrapped and is treated as is."),(0,s.kt)("p",null,"You can run ",(0,s.kt)("inlineCode",{parentName:"p"},"scala test")," code blocks with the ",(0,s.kt)("inlineCode",{parentName:"p"},"test")," sub-command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markdown",metastring:"title=TestExample.md",title:"TestExample.md"},'# `test` example\nThis is a simple example of an `.md` file with a test Scala snippet.\n\n```scala test\n//> using lib "org.scalameta::munit:0.7.29"\nclass Test extends munit.FunSuite {\n  test("example test") {\n    assert(true)\n  }\n}\n```\n')),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli test TestExample.md\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Test:\n  + example test\n"))),(0,s.kt)("h2",{id:"reset-scope-for-scala-snippets"},(0,s.kt)("inlineCode",{parentName:"h2"},"reset")," scope for ",(0,s.kt)("inlineCode",{parentName:"h2"},"scala")," snippets"),(0,s.kt)("p",null,"When multiple plain ",(0,s.kt)("inlineCode",{parentName:"p"},"scala")," snippets are used in a single ",(0,s.kt)("inlineCode",{parentName:"p"},".md")," file, by default they are actually treated as a single\nscript. They share context and when run, are executed one after another, as if they were all in a single ",(0,s.kt)("inlineCode",{parentName:"p"},".sc")," file."),(0,s.kt)("p",null,"If you want a snippet to use a fresh context instead, you can rely on the ",(0,s.kt)("inlineCode",{parentName:"p"},"reset")," keyword. This allows you to start a\nfresh scope for the marked snippet (and any coming after it)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markdown",metastring:"title=ResetExample.md",title:"ResetExample.md"},'# `reset` scope\nThis is an example of an `.md` file with multiple `scala` snippets with separate scopes\n\n## Scope 1\n```scala\nval message = "Hello"\n```\n\n## Still scope 1, since `reset` wasn\'t used yet\n```scala\nprintln(message)\n```\n\n## Scope 2\n```scala reset\nval message = "world"\nprintln(message)\n```\n\n## Scope 3\n```scala reset\nval message = "!"\nprintln(message)\n```\n')),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli test ResetExample.md\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\nworld\n!\n"))),(0,s.kt)("h2",{id:"referring-to-code-from-markdown"},"Referring to code from Markdown"),(0,s.kt)("h3",{id:"plain-scala-code-blocks"},"Plain ",(0,s.kt)("inlineCode",{parentName:"h3"},"scala")," code blocks"),(0,s.kt)("p",null,"Referring to code from plain ",(0,s.kt)("inlineCode",{parentName:"p"},"scala")," snippets in Markdown requires using their package name.\nSimilarly to scripts, the package is inferred based on the relative path to the source file in your project."),(0,s.kt)("p",null,"You also have to point to the Scope under which the code is located.\nScopes are numbered according to their order in a given ",(0,s.kt)("inlineCode",{parentName:"p"},".md")," file (starting from 0 for the first plain ",(0,s.kt)("inlineCode",{parentName:"p"},"scala"),"\nsnippet): ",(0,s.kt)("inlineCode",{parentName:"p"},"Scope{scopeNumber}"),". The ",(0,s.kt)("inlineCode",{parentName:"p"},"snippetNumber")," is omitted for the first script code block (0). In other words,\nthe first scope is just ",(0,s.kt)("inlineCode",{parentName:"p"},"Scope"),", the second is ",(0,s.kt)("inlineCode",{parentName:"p"},"Scope1"),", then ",(0,s.kt)("inlineCode",{parentName:"p"},"Scope2")," and so on."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markdown",metastring:"title=src/markdown/Example.md",title:"src/markdown/Example.md"},'## Scope 1\n```scala\ndef hello: String = "Hello"\n```\n\n## Still scope 1, since `reset` wasn\'t used yet\n```scala\ndef space: String = " "\n```\n\n## Scope 2\n```scala reset\ndef world: String = "world"\n```\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=Main.scala",title:"Main.scala"},'object Main extends App {\n  val hello = src.markdown.Example_md.Scope.hello\n  val space = src.markdown.Example_md.Scope.space\n  val world = src.markdown.Example_md.Scope.world\n  println(s"$hello$space$world)\n}\n')),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli . --enable-markdown --main-class Main\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello world\n"))),(0,s.kt)("h3",{id:"scala-raw-and-scala-test-code-blocks"},(0,s.kt)("inlineCode",{parentName:"h3"},"scala raw")," and ",(0,s.kt)("inlineCode",{parentName:"h3"},"scala test")," code blocks"),(0,s.kt)("p",null,"You can refer to code from ",(0,s.kt)("inlineCode",{parentName:"p"},"scala raw")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"scala test")," snippets as if they were the contents of a ",(0,s.kt)("inlineCode",{parentName:"p"},".scala")," file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markdown",metastring:"title=RawSnippetToReferTo.md",title:"RawSnippetToReferTo.md"},'# `raw` snippet\n```scala raw\nobject Something {\n  def message: String = "Hello"\n}\n```\n')),(0,s.kt)(i.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli RawSnippetToReferTo.md -e 'println(Something.message)'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Hello\n"))))}u.isMDXComponent=!0}}]);