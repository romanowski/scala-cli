"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8368],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=s,f=m["".concat(o,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7144:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(3117),s=n(102),r=(n(7294),n(3905)),i=["components"],l={title:"Test",sidebar_position:7},o=void 0,c={unversionedId:"commands/test",id:"commands/test",title:"Test",description:"The test command runs test suites in the test sources.",source:"@site/docs/commands/test.md",sourceDirName:"commands",slug:"/commands/test",permalink:"/scala-cli/docs/commands/test",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/commands/test.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Test",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Run",permalink:"/scala-cli/docs/commands/run"},next:{title:"REPL",permalink:"/scala-cli/docs/commands/repl"}},p={},u=[{value:"Test sources",id:"test-sources",level:2},{value:"Test framework",id:"test-framework",level:2},{value:"Test arguments",id:"test-arguments",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,s.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," command runs test suites in the test sources.\nTest sources are complied separately (after the 'main' sources), and may use different dependencies, compiler options, and other configurations."),(0,r.kt)("p",null,"By default, all command line options apply to both the main and test sources, so ",(0,r.kt)("a",{parentName:"p",href:"/scala-cli/docs/guides/using-directives"},"using directives")," (or ",(0,r.kt)("a",{parentName:"p",href:"../guides/configuration#special-imports"},"special imports"),") can be used to provide test-specific configurations."),(0,r.kt)("h2",{id:"test-sources"},"Test sources"),(0,r.kt)("p",null,"A source file is treated as test source if:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it contains the ",(0,r.kt)("inlineCode",{parentName:"li"},'//> using target.scope "test"')," directive, or"),(0,r.kt)("li",{parentName:"ul"},"the file name ends with ",(0,r.kt)("inlineCode",{parentName:"li"},".test.scala"),", or"),(0,r.kt)("li",{parentName:"ul"},"the file comes from a directory that is provided as input, and the relative path from that file to its original directory contains a ",(0,r.kt)("inlineCode",{parentName:"li"},"test")," directory")),(0,r.kt)("p",null,"The last rule may sound a bit complicated, so let's explain it using following directory structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"example/\n\u251c\u2500\u2500 a.scala\n\u251c\u2500\u2500 a.test.scala\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502   \u2514\u2500\u2500 scala\n    \u2502       \u2514\u2500\u2500 d.scala\n    \u251c\u2500\u2500 test\n    \u2502   \u2514\u2500\u2500 scala\n    \u2502       \u2514\u2500\u2500 b.scala\n    \u2514\u2500\u2500 test_unit\n        \u2514\u2500\u2500 scala\n            \u2514\u2500\u2500 e.scala\n")),(0,r.kt)("p",null,"Given that directory structure, let's analyze what file(s) will be treated as tests based on the provided inputs."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"scala-cli example")," results in the following files being treated as test sources:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.test.scala"),", since it ends with ",(0,r.kt)("inlineCode",{parentName:"li"},".test.scala")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"src/test/scala/b.scala"),", since the path to that directory contains a directory named ",(0,r.kt)("inlineCode",{parentName:"li"},"test"))),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"e.scala")," is not treated as a test source since it lacks a parent directory in its relative path that is exactly named ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," (the name",(0,r.kt)("inlineCode",{parentName:"p"},"test_unit")," starts with ",(0,r.kt)("inlineCode",{parentName:"p"},"test"),", but ",(0,r.kt)("inlineCode",{parentName:"p"},"scala-cli")," only looks for parent directories on the relative path with the exact name ",(0,r.kt)("inlineCode",{parentName:"p"},"test"),")."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"scala-cli example/src")," results in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/test/scala/b.scala")," being treated as a test file since its relative path (",(0,r.kt)("inlineCode",{parentName:"p"},"test/scala/b.scala"),") contains a directory named ",(0,r.kt)("inlineCode",{parentName:"p"},"test"),"."),(0,r.kt)("p",null,"Conversely, ",(0,r.kt)("inlineCode",{parentName:"p"},"scala-cli example/src/test")," results in no test sources, since the relative path to ",(0,r.kt)("inlineCode",{parentName:"p"},"b.scala")," does not contain ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," (the fact that the directory provided as input is named ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," does not make its content a test source)."),(0,r.kt)("p",null,"Directives take precedence over file or path names, so ",(0,r.kt)("inlineCode",{parentName:"p"},"using target main")," can be used to force ",(0,r.kt)("inlineCode",{parentName:"p"},"test/a.scala")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"a.test.scala")," to not be treated as tests."),(0,r.kt)("p",null,"As a rule of thumb, we recommend naming all of your test files with the ",(0,r.kt)("inlineCode",{parentName:"p"},".test.scala")," suffix."),(0,r.kt)("h2",{id:"test-framework"},"Test framework"),(0,r.kt)("p",null,"In order to run tests with a test framework, add the framework dependency to your application.\nSome of the most popular test frameworks in Scala are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://scalameta.org/munit"},"munit"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"org.scalameta::munit::0.7.27")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/com-lihaoyi/utest"},"utest"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"com.lihaoyi::utest::0.7.10")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.scalatest.org"},"ScalaTest"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"org.scalatest::scalatest::3.2.9")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://junit.org/junit4"},"JUnit 4"),", which can be used via a ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/sbt/junit-interface"},"dedicated interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"com.github.sbt:junit-interface:0.13.2"))),(0,r.kt)("p",null,"The following example shows how to run an munit-based test suite:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=MyTests.scala",title:"MyTests.scala"},'//> using lib "org.scalameta::munit::0.7.27"\n\nclass MyTests extends munit.FunSuite {\n  test("foo") {\n    assert(2 + 2 == 4)\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli test MyTests.scala\n# Compiling project (1 Scala source)\n# Compiled project\n# MyTests:\n#   + foo 0.143s\n")),(0,r.kt)("h2",{id:"test-arguments"},"Test arguments"),(0,r.kt)("p",null,"You can pass test arguments to your test framework by passing them after ",(0,r.kt)("inlineCode",{parentName:"p"},"--"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=MyTests.scala",title:"MyTests.scala"},'//> using lib "org.scalatest::scalatest::3.2.9"\n\nimport org.scalatest._\nimport org.scalatest.flatspec._\nimport org.scalatest.matchers._\n\nclass Tests extends AnyFlatSpec with should.Matchers {\n  "A thing" should "thing" in {\n    assert(2 + 2 == 4)\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli test MyTests.scala -- -oD\n# Compiling project (1 Scala source)\n# Compiled project\n# Tests:\n# A thing\n# - should thing (22 milliseconds)\n# Run completed in 359 milliseconds.\n# Total number of tests run: 1\n# Suites: completed 1, aborted 0\n# Tests: succeeded 1, failed 0, canceled 0, ignored 0, pending 0\n# All tests passed.\n")))}d.isMDXComponent=!0}}]);