"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6225],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),g=u(n),c=a,m=g["".concat(s,".").concat(c)]||g[c]||d[c]||o;return n?i.createElement(m,l(l({ref:t},p),{},{components:n})):i.createElement(m,l({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=g;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var u=2;u<o;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2256:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return d}});var i=n(3117),a=n(102),o=(n(7294),n(3905)),l=["components"],r={title:"Debugging with Scala CLI",sidebar_position:10},s=void 0,u={unversionedId:"cookbooks/debugging",id:"cookbooks/debugging",title:"Debugging with Scala CLI",description:"Debugging with Scala CLI is very simple. All one needs to do is to pass the --debug option, which is available for the run and test sub-commands.",source:"@site/docs/cookbooks/debugging.md",sourceDirName:"cookbooks",slug:"/cookbooks/debugging",permalink:"/scala-cli/docs/cookbooks/debugging",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/cookbooks/debugging.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Debugging with Scala CLI",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Use Scala CLI in GitHub Actions",permalink:"/scala-cli/docs/cookbooks/gh-action"},next:{title:"Command-line options",permalink:"/scala-cli/docs/reference/cli-options"}},p={},d=[{value:"Preparing files to debug",id:"preparing-files-to-debug",level:2},{value:"VS Code with Metals",id:"vs-code-with-metals",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Debugging",id:"debugging",level:3},{value:"IntelliJ IDEA",id:"intellij-idea",level:2},{value:"Debugging in the attach mode",id:"debugging-in-the-attach-mode",level:3},{value:"Debugging in the listen mode",id:"debugging-in-the-listen-mode",level:3}],g={toc:d};function c(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Debugging with Scala CLI is very simple. All one needs to do is to pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"--debug")," option, which is available for the ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," sub-commands."),(0,o.kt)("h2",{id:"preparing-files-to-debug"},"Preparing files to debug"),(0,o.kt)("p",null,"Let's start with creating a few example files, which we will run and debug later on:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=MyClass.scala",title:"MyClass.scala"},'object MyClass extends App  {\n  println("Line 1")\n  println("Line 2")\n  println("Line 3")\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=MyTests.test.scala",title:"MyTests.test.scala"},'//> using lib "org.scalameta::munit::0.7.27"\n\nclass MyTests extends munit.FunSuite {\n  test("foo") {\n    assert(2 + 2 == 4)\n  }\n}\n')),(0,o.kt)("h2",{id:"vs-code-with-metals"},"VS Code with Metals"),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"If you are using ",(0,o.kt)("strong",{parentName:"p"},"VS Code with Metals"),", you will have to define ",(0,o.kt)("strong",{parentName:"p"},"launch configurations")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"launch.json")," file inside the ",(0,o.kt)("inlineCode",{parentName:"p"},".vscode")," directory."),(0,o.kt)("p",null,"Within each configuration you will have to define the following ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes"},"configuration attributes"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"request"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"buildTarget"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"hostName")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"port"),"."),(0,o.kt)("p",null,"If you don't know what are the exact ",(0,o.kt)("strong",{parentName:"p"},"build target")," names of your project, you can check them in ",(0,o.kt)("a",{parentName:"p",href:"https://scalameta.org/metals/docs/editors/vscode/#run-doctor"},"Metals Doctor")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Build target")," column:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Metals Doctor view",src:n(3410).Z,width:"1956",height:"838"})),(0,o.kt)("p",null,"If ",(0,o.kt)("strong",{parentName:"p"},"no build targets")," have been found, perform the following steps:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"run ",(0,o.kt)("inlineCode",{parentName:"li"},"scala-cli compile .")," in the command line."),(0,o.kt)("li",{parentName:"ul"},"when the compilation is complete, run ",(0,o.kt)("inlineCode",{parentName:"li"},"Connect to build server")," in the Metals ",(0,o.kt)("strong",{parentName:"li"},"build commands")," section.")),(0,o.kt)("p",null,"After these steps, build targets should be visible in the Metals Doctor view."),(0,o.kt)("p",null,"Example ",(0,o.kt)("inlineCode",{parentName:"p"},"launch.json")," configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=.vscode/launch.json",title:".vscode/launch.json"},'{\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "type": "scala",\n      "request": "attach",\n      "name": "project",\n      "buildTarget": "project_183d125c5c",\n      "hostName": "localhost",\n      "port": 5005\n    },\n    {\n      "type": "scala",\n      "request": "attach",\n      "name": "project-test",\n      "buildTarget": "project_183d125c5c-test",\n      "hostName": "localhost",\n      "port": 5005\n    }   \n  ]\n}\n')),(0,o.kt)("p",null,"After defining configurations in the ",(0,o.kt)("inlineCode",{parentName:"p"},"launch.json")," file, you should be able to see them in ",(0,o.kt)("strong",{parentName:"p"},"Configuration dropdown")," in the ",(0,o.kt)("strong",{parentName:"p"},"Run and Debug")," view:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Configuration dropdown",src:n(1238).Z,width:"1494",height:"568"})),(0,o.kt)("p",null,"After setting up the configuration you can proceed to debugging."),(0,o.kt)("h3",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"Set ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/debugging#_breakpoints"},"breakpoints")," for the file you would like to debug:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Setting breakpoints",src:n(7324).Z,width:"1687",height:"620"})),(0,o.kt)("p",null,"Run one of the following commands depending on which file you would like to debug:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"run ",(0,o.kt)("inlineCode",{parentName:"li"},"scala-cli MyClass.scala --debug")," if you would like to debug ",(0,o.kt)("inlineCode",{parentName:"li"},"MyClass.scala")," file"),(0,o.kt)("li",{parentName:"ul"},"run ",(0,o.kt)("inlineCode",{parentName:"li"},"scala-cli test MyTests.test.scala --debug")," if you would like to debug ",(0,o.kt)("inlineCode",{parentName:"li"},"MyTests.test.scala")," file")),(0,o.kt)("p",null,"After compilation is completed, Scala CLI should stop and ",(0,o.kt)("strong",{parentName:"p"},"listen for transport dt_socket at port 5005"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Please note that 5005 is the default port for debugging with scala-cli. You can always change it by passing ",(0,o.kt)("inlineCode",{parentName:"p"},"--debug-port")," option.")),(0,o.kt)("p",null,"At this moment go to the ",(0,o.kt)("strong",{parentName:"p"},"Run and Debug")," view, select proper configuration from the ",(0,o.kt)("strong",{parentName:"p"},"Configuration dropdown")," and run debugger by clicking ",(0,o.kt)("strong",{parentName:"p"},"green arrow")," on the side:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Running debugger",src:n(5770).Z,width:"1863",height:"832"})),(0,o.kt)("p",null,"After all these steps, the debugger should stop at the first breakpoint and you can proceed to ",(0,o.kt)("strong",{parentName:"p"},"debugging")," your code using all features delivered by VS Code. For more information check ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/debugging"},"this guide"),"."),(0,o.kt)("h2",{id:"intellij-idea"},"IntelliJ IDEA"),(0,o.kt)("h3",{id:"debugging-in-the-attach-mode"},"Debugging in the attach mode"),(0,o.kt)("p",null,"The first thing that you need to do to start debugging is ",(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/debugging-your-first-java-application.html#setting-breakpoints"},"setting breakpoints")," for the files you want to debug:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Setting breakpoints",src:n(1767).Z,width:"1610",height:"738"})),(0,o.kt)("p",null,"Run one of the following commands depending on which file you would like to debug:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"run ",(0,o.kt)("inlineCode",{parentName:"li"},"scala-cli MyClass.scala --debug")," if you would like to debug ",(0,o.kt)("inlineCode",{parentName:"li"},"MyClass.scala")," file"),(0,o.kt)("li",{parentName:"ul"},"run ",(0,o.kt)("inlineCode",{parentName:"li"},"scala-cli test MyTests.test.scala --debug")," if you would like to debug ",(0,o.kt)("inlineCode",{parentName:"li"},"MyTests.test.scala")," file")),(0,o.kt)("p",null,"After compilation is completed, Scala CLI should stop and ",(0,o.kt)("strong",{parentName:"p"},"listen for transport dt_socket at port 5005"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Please note that 5005 is the default port for debugging with scala-cli. You can always change it by passing ",(0,o.kt)("inlineCode",{parentName:"p"},"--debug-port")," option.")),(0,o.kt)("p",null,"At this moment, you can attach to process by clicking ",(0,o.kt)("strong",{parentName:"p"},"Run -> Attach to Process")," and choosing process, which is running at port ",(0,o.kt)("strong",{parentName:"p"},"5005"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Attach to Process",src:n(617).Z,width:"1937",height:"973"})),(0,o.kt)("p",null,"After all these steps, the debugger should stop at the first breakpoint and you can proceed to ",(0,o.kt)("strong",{parentName:"p"},"debug")," your code using all features delivered by IntelliJ IDEA. For more information check ",(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/debugging-your-first-java-application.html#analyzing-state"},"this guide"),"."),(0,o.kt)("h3",{id:"debugging-in-the-listen-mode"},"Debugging in the listen mode"),(0,o.kt)("p",null,"If you would like to debug in listen mode, add a new ",(0,o.kt)("strong",{parentName:"p"},"Remote JVM Debug")," ",(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/run-debug-configuration.html"},"configuration")," with the following setup:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Listen mode configuration",src:n(2861).Z,width:"1866",height:"1042"})),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/debugging-your-first-java-application.html#setting-breakpoints"},"Set breakpoints")," for the files you want to debug:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Setting breakpoints",src:n(1767).Z,width:"1610",height:"738"})),(0,o.kt)("p",null,"Run the previously set configuration by clicking on the ",(0,o.kt)("strong",{parentName:"p"},"green debug button")," on the side:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Running debug configuration",src:n(1960).Z,width:"1478",height:"695"})),(0,o.kt)("p",null,"Run one of the following commands depending on which file you would like to debug:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"run ",(0,o.kt)("inlineCode",{parentName:"li"},"scala-cli MyClass.scala --debug-mode listen")," if you would like to debug ",(0,o.kt)("inlineCode",{parentName:"li"},"MyClass.scala")," file"),(0,o.kt)("li",{parentName:"ul"},"run ",(0,o.kt)("inlineCode",{parentName:"li"},"scala-cli test MyTests.test.scala --debug-mode listen")," if you would like to debug ",(0,o.kt)("inlineCode",{parentName:"li"},"MyTests.test.scala")," file")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"attach")," is the default mode for debugging with scala-cli. You can always change it by passing ",(0,o.kt)("inlineCode",{parentName:"p"},"--debug-mode")," option. Available modes are: ",(0,o.kt)("inlineCode",{parentName:"p"},"attach")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"listen"),".")),(0,o.kt)("p",null,"After all these steps the debugger should stop at the first breakpoint and you can proceed to ",(0,o.kt)("strong",{parentName:"p"},"debug")," your code using all features delivered by IntelliJ IDEA. For more information check ",(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/debugging-your-first-java-application.html#analyzing-state"},"this guide"),"."))}c.isMDXComponent=!0},617:function(e,t,n){t.Z=n.p+"assets/images/debugging_attach_to_process-57f552b51d57326abcd8e113a7854e61.png"},1238:function(e,t,n){t.Z=n.p+"assets/images/debugging_configuration_dropdown-c6883b309e946deb394bcd053b81dd9b.png"},2861:function(e,t,n){t.Z=n.p+"assets/images/debugging_listen_mode_config-9698c91f2c4ab1bdc54575f98d0b3c75.png"},3410:function(e,t,n){t.Z=n.p+"assets/images/debugging_run_doctor_view-02994f0e54647fe24b82fdc24efe748a.png"},1960:function(e,t,n){t.Z=n.p+"assets/images/debugging_running_debug_configuration-58989e3c403ce04828726008bdf24f98.png"},5770:function(e,t,n){t.Z=n.p+"assets/images/debugging_running_debugger-de6a50fdde50acddda019757ee231938.png"},1767:function(e,t,n){t.Z=n.p+"assets/images/debugging_setting_breakpoints_intellij-e971f76161e8400fdd5fb4567442a5a6.png"},7324:function(e,t,n){t.Z=n.p+"assets/images/debugging_setting_breakpoints_vs_code-6d6ac25ec68ad8134224c0ac59db9ffa.png"}}]);